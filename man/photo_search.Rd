% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/photo_search.R
\name{photo_search}
\alias{photo_search}
\title{Search for photo metadata}
\usage{
photo_search(mindate_taken = "2019-01-01",
  maxdate_taken = "2019-01-01", mindate_uploaded = NULL,
  maxdate_uploaded = NULL, user_id = NULL, text = NULL,
  tags = NULL, bbox = NULL, woe_id = NULL, sf_layer = NULL,
  has_geo = TRUE)
}
\arguments{
\item{mindate_taken}{Character, required. Minimum taken date. Photos with an
taken date greater than or equal to this value will be returned. The date
should be in the form of "YYYY-MM-DD".}

\item{maxdate_taken}{Character, required. Maximum taken date. Photos with an
taken date less than or equal to this value will be returned. The date
should be in the form of "YYYY-MM-DD".}

\item{mindate_uploaded}{Character, optional. Minimum upload date. Photos with
an upload date greater than or equal to this value will be returned. The
date can be in the form of a unix timestamp or mysql datetime.}

\item{maxdate_uploaded}{Character, optional. Maximum upload date. Photos with
an upload date less than or equal to this value will be returned. The date
can be in the form of a unix timestamp or mysql datetime.}

\item{user_id}{Character, optional. The NSID of the user who's photo to
search. If this parameter isn't passed then everybody's public photos will
be searched.}

\item{text}{String, optional. A free text search. Photos who's title,
description or tags contain the text will be returned. You can exclude
results that match a term by prepending it with a - character.}

\item{tags}{String, optional. A comma-delimited list of tags. Photos with one
or more of the tags listed will be returned. You can exclude results that
match a term by prepending it with a - character.}

\item{bbox}{String, optional bounding box of search area provide as:
"minimum_longitude,minimum_latitude,maximum_longitude,maximum_latitude".}

\item{woe_id}{Numeric, optional "where on earth identifier" can be supplied
instead of bbox. Use \code{\link{find_place}} to obtain woe_id for a place.}

\item{sf_layer}{A simple features layer, optional, area to search for photos,
can be supplied instead of a bbox or woeID.}

\item{has_geo}{Logical, optional argument for whether returned photos need
associated spatial data.}
}
\value{
data.frame. Output consists of 57 variables including; latitude and
longitude of photograph, date and time it was taken, associated tags and
image urls.

Full list of variables returned: id, owner, secret, server, farm, title,
ispublic, isfriend, isfamily, license, datetaken, datetakengranularity,
datetakenunknown, count_views, count_comments, count_faves, tags, latitude,
longitude, accuracy, context, place_id, woeid, geo_is_family,
geo_is_friend, geo_is_contact, geo_is_public, url_sq, height_sq, width_sq,
url_t, height_t, width_t, url_s, height_s,	width_s	url_q, height_q,
width_q, url_m, height_m, width_m, url_n, height_n, width_n, url_z,
height_z, width_z, url_c, height_c, width_c, url_l, height_l, width_l,
url_o, height_o, width_o.
}
\description{
Returns image metadata for photos matching the search terms.
}
\details{
Uses the flickr.photos.search API method from the Flickr API. This search
method requires a limiting factor to prevent parameterless searches - to
ensure this is met the function requires both a minimum and a maximum date
that searched photographs were taken on. See
\url{https://www.flickr.com/services/api/flickr.photos.search.html} for more
information on the API method.
}
\examples{
\dontrun{
photo_search(
  mindate_taken = "2019-01-01",
  maxdate_taken = "2019-01-02",
  text = "tree",
  bbox = "-13.623047,47.279229,3.251953,60.630102",
  has_geo = TRUE
  )

photo_search(
  mindate_taken = "2017-01-01",
  maxdate_taken = "2017-01-02",
  mindate_uploaded = "2017-03-04",
  maxdate_uploaded = "2017-05-05",
  tags = "lake"
  )
}
}
